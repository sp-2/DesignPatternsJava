
public class QuickSort {

	public static void swap(int[] items, int firstIndex, int secondIndex) {
		 int temp = items[firstIndex];
		 items[firstIndex] = items[secondIndex];
		 items[secondIndex] = temp;
	}

	public static int partition(int[] items, int start, int end) {
		
		int pivot = end;//lomuto partioning scheme
		//int pivot = (start+end)/2;
		int i = start;
		int j = end;
			
		while(i<j) {
			while(items[i] <= items[pivot] && i < end) { i++;}
			while(items[j] >= items[pivot] && i<j) { j--;}		
			if(i<j) {swap(items, i++, j--);}
		}

		swap(items, pivot, j);
		return j;
	}
	
public static int partitionHoare(int[] items, int start, int end) {
		
		int pivot = start + (end-start)/2;//Hoare partioning scheme

		int i = start;
		int j = end;

		while(i<=j) {
			while(items[i] < items[pivot]  && i<end || i==pivot) { i++;}
			while(items[j] > items[pivot] || j==pivot && j>start) { j--;}	
			
			if(i<=j) {
				swap(items, i++, j--);
			}
		}
		i=i>end?end:i;
		if(i<=pivot || (i>pivot&&items[i]<=items[pivot])) {//works but not correct on return of i,or correct but pivot is different?
			swap(items, i, pivot);
		}

		return i;
	}
	
public static void quickSortHoare(int[] items, int start, int end) {

	if(end<=start) {return;}
	
	int pivot = partitionHoare(items, start, end);

	quickSortHoare(items, start, pivot-1);
	quickSortHoare(items, pivot, end);

}

public static int partitionLamuto(int[] items, int start, int end) {
		
		int pivot = items[end];//lomuto partioning scheme
		
		int i = start;
				
		for(int j=start; j<end; j++) {
			if(items[j]<pivot){swap(items, i, j);i++;}			
		}
		
		swap(items, i, end);
		
		return i;
	}
	
public static void quickSortLamuto(int[] items, int start, int end) {

	if(end<=start) {return;}
	
	int pivot = partitionLamuto(items, start, end);

	quickSortLamuto(items, start, pivot-1);
	quickSortLamuto(items, pivot+1, end);

}
	public static void quickSort(int[] items, int start, int end) {

		if(end<=start) {return;}
		
		int pivot = partition(items, start, end);

		quickSort(items, start, pivot-1);
		quickSort(items, pivot+1, end);

	}
	
	public static void quickSort1(int[] items, int start, int end) {
		System.out.println("\nstart = "+start+" end = "+end);
		for(int i = 0; i< items.length; i++) {
			System.out.print(items[i]+" ");
		}
		if(end<=start ) {return;}
		
		int pivot = end;
		
		int i = start;
		int j = end;
			
		while(i<j) {
			while(items[i] <= items[pivot] && i < end) { i++;}//System.out.println(" i = "+i);}
			while(items[j] >= items[pivot] && i<j) { j--;}
			//System.out.println("\nj =u "+j+" i = "+i+" pivot = "+pivot);
			
			if(i<j) {swap(items, i++, j--);}
			//break;
			
		}
		//pivot = j;
//		System.out.println();
//		System.out.println("j = "+j+" i = "+i+" pivot = "+pivot);
//		System.out.println("start wq= "+start+" end w= "+end+" pivot = "+pivot);
//		for(int i1 = 0; i1< items.length; i1++) {
//			System.out.print(items[i1]+"  ");
//		}System.out.println();
		swap(items, pivot, j);
		pivot = j;
		System.out.println("\npivot = "+pivot);
//		System.out.println("start w= "+start+" end w= "+end+" pivot = "+pivot);
//		for(int i1 = 0; i1< items.length; i1++) {
//			System.out.print(items[i1]+"  ");
//		}System.out.println();
		
		quickSort(items, start, pivot-1);
		quickSort(items, pivot+1, end);
		
		//return items;
		}
	
	//code signal
	public static int[] quickSort11(int[] a, int l, int r) {
		//System.out.println("w");
		System.out.println("\nLeft!= "+l+"Right ="+r);
		
		  if (l >= r) {
		    return a;
		  }
		  for(int i1 = 0; i1< a.length; i1++) {
				System.out.print(a[i1]+"@ ");
			}
		  int x = a[l];
		  int i = l;
		  int j = r;

		  while (i <= j) {
			  System.out.println("\n*88888***i= "+i+" #j="+j);
		    while (a[i] < x) {//System.out.println("\ni!= "+i+" j="+j);
		      i++;
		    }
		    while (a[j] > x) {//System.out.println("\ni= "+i+" j@="+j);
		      j--;
		    }
		    //System.out.println("\nLeft!= "+l+"Right ="+r);
		    System.out.println("\n#i= "+i+" #j="+j);
		    for(int i1 = 0; i1< a.length; i1++) {
				System.out.print(a[i1]+" ");
			}
		    if (i <= j) {
		      int t = a[i];
		      a[i] = a[j];
		      a[j] = t;
		      i++;
		      j--;
		      System.out.println("\n*******i= "+i+" #j="+j);
		    }
		    System.out.println("\n*******i= "+i+" #j="+j);
//		    for(int i1 = 0; i1< a.length; i1++) {
//				System.out.print(a[i1]+"..");
//			}
		  }
		  System.out.println("\ni= "+i+" j="+j);
			for(int i1 = 0; i1< a.length; i1++) {
				System.out.print(a[i1]+". ");
			}
//		  int t = a[i];
//	      a[i] = x;
//	      a[l] = t;

//	      quickSort11(a, l, i);
//	      quickSort11(a, i+1, r);
		  //if(j<l || j>r) {return a;}
//		  if(j<l) {j=l;}
//		  if(j>r) {j=r-1;}
//	      quickSort11(a, l, j);
//	      quickSort11(a, j+1, r);
	      quickSort11(a, l, j);
	      quickSort11(a, i, r);
		  return a;
		}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//int[] items = {2,88,22,67,0, 1};
		int[] items = {2,88,22,67,0, 1, 1,6,5,12,2,22,11,55};
		//int[] sol = 
//		quickSort(items,0,items.length-1);
//		
//		for(int i = 0; i< items.length; i++) {
//			System.out.print(items[i]+" ");
//		}
		
quickSortLamuto(items,0,items.length-1);
		
		for(int i = 0; i< items.length; i++) {
			System.out.print(items[i]+" ");
		}
	

	int[] items1 = {2,88,22,67,0, 1, 1,6,5,12,2,22,11,55,100};
	quickSortHoare(items1, 0, items1.length-1);
	System.out.println();
	for(int i1 = 0; i1< items1.length; i1++) {
		System.out.print(items1[i1]+" ");
	}	
	int[] items2 = {2,88,22,67,0, 1, 1,6,5,12,2,22,11,55,101};
//	quickSort11(items2, 0, 14);
//	System.out.println();
//	for(int i1 = 0; i1< items2.length; i1++) {
//		System.out.print(items2[i1]+" ");
//	}
	int[] a = {5, 2, 1, 7, 5, 3, 2, 3};
	int l = 0;
	int r = 3;// the output should be
			//quickSort(a, l, r) = [1, 2, 5, 7, 5, 3, 2, 3].
//	quickSort11(a, l, r);
//	System.out.println();
//	for(int i1 = 0; i1< a.length; i1++) {
//		System.out.print(a[i1]+" ");
//	}
//	
//	int[] a1= {5, 2, 1, 7, 5, 3, 2, 3};
//			int l1= 0;
//			int r1= 7;
//
//	quickSort11(a1, l1, r1);//[1, 2, 2, 3, 3, 5, 5, 7]
//	System.out.println();
//	for(int i1 = 0; i1< a1.length; i1++) {
//		System.out.print(a1[i1]+" ");
//	}
//	
	int[] a2= {8, 7, 6, 6, 6, 5, 3, 2, 2, 1};
			int l2= 0;
			int r2= 9;
			quickSort11(a2, l2, r2);//[1, 2, 2, 3, 5, 6, 6, 6, 7, 8]
			System.out.println();
			for(int i1 = 0; i1< a2.length; i1++) {
				System.out.print(a2[i1]+" ");
			}
}
}