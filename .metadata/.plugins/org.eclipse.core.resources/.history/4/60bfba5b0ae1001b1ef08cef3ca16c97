
public class MergeSort {

	public static void mergeSort(int[] items) {
		mergeSortH(items, 0, items.length-1);
	}
	public static void mergeSort(int[] arr, int start, int end) {
		if(start>=end) {return;}
		
		int mid = (start+end)/2;
		

		mergeSort(arr, start, mid);
		mergeSort(arr, mid+1, end);
		
		merge(arr, start, end, mid);
	}

	public static void merge(int[] arr, int start, int end, int mid) {
		int[] result = new int[end - start +1];
		System.out.println("s "+start+" e " +end);
	
		for(int i=0, lIndex=start, rIndex=mid+1 ; i<result.length; i++) {
			System.out.println("i "+i+" lIndex " +lIndex+" rIndex " +rIndex);
			if(lIndex>mid) {
				result[i] = arr[rIndex++];
			} else if(rIndex>end) {
				result[i] = arr[lIndex++];
			} else if(arr[lIndex]<arr[rIndex]) {
				result[i] = arr[lIndex++];
			} else {
				result[i] = arr[rIndex++];
			}
		}
		
		for(int i=start, r=0; i<=end;i++, r++) {
			arr[i] = result[r];
		}
				
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] a2= {8, 7, 6, 6, 6, 5, -1, 11, -11, 3, 2, 2, 1};
		quickSortLamuto(a2);//[1, 2, 2, 3, 5, 6, 6, 6, 7, 8]
		System.out.println();
		for(int i1 = 0; i1< a2.length; i1++) {
			System.out.print(a2[i1]+" ");
		}
	}
}
